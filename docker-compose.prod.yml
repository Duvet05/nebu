# ===========================================
# NEBU BACKEND - PRODUCCIÓN SEGURA Y OPTIMIZADA
# ===========================================
# Version: 2.1 - Sin Docker Secrets, con seguridad mejorada
# Fecha: Octubre 2025

version: '3.8'

networks:
  traefik-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  nebu-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  frontend_uploads:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  traefik_letsencrypt:
    driver: local

services:
  # ==============================================
  # TRAEFIK - REVERSE PROXY SEGURO
  # ==============================================
  traefik:
    image: traefik:v3.0.4  # ✅ Versión específica
    container_name: nebu-traefik-prod
    restart: on-failure:3  # ✅ Restart policy específica
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:9080
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --log.level=${LOG_LEVEL:-INFO}
      - --accesslog=true
      - --metrics.prometheus=true
      - --ping=true
    ports:
      - "80:80"
      - "443:443"
      # ✅ Puerto 8080 REMOVIDO por seguridad
      - "127.0.0.1:9080:9080"  # ✅ Dashboard solo localhost
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nebu-backend_traefik-network"
      
      # ✅ Dashboard con autenticación básica
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN:-flow-telligence.com}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefik-dashboard.entrypoints=traefik"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=auth-basic"
      
      # Middleware de autenticación (admin:admin123)
      - "traefik.http.middlewares.auth-basic.basicauth.users=admin:$$2y$$10$$7jKKUP7/K.H.zt2VXtmQ4O6IjR7nKNZD8W8.IW5UIzW8QjV1rJ1Ka"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9080/ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ==============================================
  # FRONTEND - RECURSOS AUMENTADOS
  # ==============================================
  frontend:
    build:
      context: ../nebu-website
      dockerfile: Dockerfile
      target: production
    container_name: nebu-frontend
    restart: on-failure:3  # ✅ Restart policy específica
    environment:
      - NODE_ENV=production
      - PORT=3000
      - APP_URL=https://${DOMAIN:-flow-telligence.com}
      - API_URL=https://api.${DOMAIN:-flow-telligence.com}
      - SESSION_SECRET=${SESSION_SECRET}
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - FROM_EMAIL=${FROM_EMAIL}
    volumes:
      - frontend_uploads:/app/public/uploads:rw
    networks:
      - traefik-network
      - nebu-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nebu-backend_traefik-network"
      
      # Router principal para el dominio
      - "traefik.http.routers.frontend-secure.rule=Host(`${DOMAIN:-flow-telligence.com}`) || Host(`www.${DOMAIN:-flow-telligence.com}`)"
      - "traefik.http.routers.frontend-secure.entrypoints=websecure"
      - "traefik.http.routers.frontend-secure.tls=true"
      - "traefik.http.routers.frontend-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend-secure.service=frontend"
      
      # Router para acceso por IP (temporal hasta DNS)
      - "traefik.http.routers.frontend-ip.rule=Host(`62.169.30.44`)"
      - "traefik.http.routers.frontend-ip.entrypoints=websecure"
      - "traefik.http.routers.frontend-ip.tls=true"
      - "traefik.http.routers.frontend-ip.service=frontend"
      
      # Servicio
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      
      # ✅ Middlewares de seguridad avanzada
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      
      # ✅ Rate limiting
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=100"
      - "traefik.http.middlewares.rate-limit.ratelimit.average=50"
      
      # Aplicar middlewares
      - "traefik.http.routers.frontend-secure.middlewares=security-headers,rate-limit"
      - "traefik.http.routers.frontend-ip.middlewares=security-headers,rate-limit"
    deploy:
      resources:
        limits:
          memory: 2G        # ✅ AUMENTADO: 2GB RAM
          cpus: '1.0'       # ✅ AUMENTADO: 1 CPU completo
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==============================================
  # POSTGRESQL - CON LÍMITES Y OPTIMIZACIÓN
  # ==============================================
  postgres:
    image: postgres:15.4-alpine  # ✅ Versión específica
    container_name: nebu-postgres-prod
    restart: on-failure:3
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    command: >
      postgres 
      -c max_connections=200 
      -c shared_buffers=512MB 
      -c effective_cache_size=2GB 
      -c maintenance_work_mem=128MB 
      -c checkpoint_completion_target=0.9 
      -c wal_buffers=16MB 
      -c default_statistics_target=100 
      -c random_page_cost=1.1 
      -c effective_io_concurrency=200 
      -c work_mem=8MB 
      -c min_wal_size=1GB 
      -c max_wal_size=4GB 
      -c max_worker_processes=4 
      -c max_parallel_workers_per_gather=2 
      -c max_parallel_workers=4
      -c log_min_duration_statement=1000
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-master.sh:/docker-entrypoint-initdb.d/init-master.sh:ro
    networks:
      - nebu-network
    deploy:
      resources:
        limits:
          memory: 2G        # ✅ AGREGADO: Límites de recursos
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # REDIS - CON AUTENTICACIÓN Y AOF MEJORADO
  # ==============================================
  redis:
    image: redis:7.2.1-alpine  # ✅ Versión específica
    container_name: nebu-redis-prod
    restart: on-failure:3
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru 
      --tcp-keepalive 60 
      --timeout 300 
      --save 900 1 
      --save 300 10 
      --save 60 10000
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_data:/data
    networks:
      - nebu-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # ==============================================
  # BACKEND - CON HEALTH CHECK Y OPTIMIZACIONES
  # ==============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: nebu-backend-prod
    restart: on-failure:3
    environment:
      - NODE_ENV=production
      - PORT=${BACKEND_PORT:-3001}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_SSL=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # ✅ Redis con autenticación
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - DOMAIN=${DOMAIN}
      - CORS_ORIGIN=${FRONTEND_URL}
      - ALLOW_LOCALHOST_CORS=${ALLOW_LOCALHOST_CORS:-false}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - RATE_LIMIT_TTL=60000
      - RATE_LIMIT_LIMIT=100
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
    volumes:
      - backend_uploads:/app/uploads:rw
    networks:
      - traefik-network
      - nebu-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nebu-backend_traefik-network"
      - "traefik.http.routers.backend.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
      
      # ✅ Rate limiting para API
      - "traefik.http.middlewares.api-rate-limit.ratelimit.burst=200"
      - "traefik.http.middlewares.api-rate-limit.ratelimit.average=100"
      - "traefik.http.routers.backend.middlewares=api-rate-limit"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'        # ✅ AUMENTADO: 1 CPU completo
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==============================================
  # PROMETHEUS - MONITOREO CON AUTENTICACIÓN
  # ==============================================
  prometheus:
    image: prom/prometheus:v2.47.0  # ✅ Versión específica
    container_name: nebu-prometheus
    restart: on-failure:3
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - traefik-network
      - nebu-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=auth-basic"  # ✅ Con autenticación
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ==============================================
  # GRAFANA - CON CONFIGURACIÓN SEGURA
  # ==============================================
  grafana:
    image: grafana/grafana:10.1.2  # ✅ Versión específica
    container_name: nebu-grafana
    restart: on-failure:3
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${SESSION_SECRET}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - traefik-network
      - nebu-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    depends_on:
      - prometheus

  # ==============================================
  # LOKI - LOGS CENTRALIZADOS
  # ==============================================
  loki:
    image: grafana/loki:2.9.0  # ✅ Versión específica
    container_name: nebu-loki
    restart: on-failure:3
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    networks:
      - nebu-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ==============================================
  # PROMTAIL - RECOLECCIÓN DE LOGS
  # ==============================================
  promtail:
    image: grafana/promtail:2.9.0  # ✅ Versión específica
    container_name: nebu-promtail
    restart: on-failure:3
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/promtail.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - nebu-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    depends_on:
      - loki
