services:
  # ==============================================
  # TRAEFIK - DESARROLLO (SIN SSL)
  # ==============================================
  traefik:
    image: traefik:v3.0
    container_name: nebu-traefik-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard de Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --log.level=INFO
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/rawdata"]
      interval: 30s
      timeout: 3s
      retries: 3

  # ==============================================
  # PORTAINER - GESTIÃ“N DE CONTENEDORES
  # ==============================================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: nebu-portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.localhost`)"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  # ==============================================
  # POSTGRESQL - BASE DE DATOS
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: nebu-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-nebu_db}
      POSTGRES_USER: ${DATABASE_USERNAME:-nebu_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-nebu_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-master.sh:/docker-entrypoint-initdb.d/init-master.sh
    networks:
      - nebu-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-nebu_user} -d ${DATABASE_NAME:-nebu_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # REDIS - CACHE Y SESSIONS
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: nebu-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - nebu-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # ==============================================
  # BACKEND - API NESTJS
  # ==============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: nebu-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=${DATABASE_USERNAME:-nebu_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-nebu_password_2024}
      - DATABASE_NAME=${DATABASE_NAME:-nebu_db}
      - DATABASE_SSL=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_change_in_production}
      - CORS_ORIGIN=http://localhost:3000,http://localhost:8081
      - LOG_LEVEL=debug
      # LiveKit Configuration
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
    volumes:
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads
    networks:
      - traefik-network
      - nebu-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=3001"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  portainer_data:
    driver: local

networks:
  traefik-network:
    driver: bridge
  nebu-network:
    driver: bridge
